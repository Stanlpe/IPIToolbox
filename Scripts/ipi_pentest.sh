#!/bin/bash

DATA_FILE="data_outils_pentest.json"
GITHUB_BASE_URL="https://github.com/Stanlpe/pentest-tools/tree/main/Cheatsheets"

# Couleurs et style
clear
echo -e "\e[35m\342\225\234═════════════════════════════════════════════════\342\225\235"
echo -e "║          💗   I P I  - Pentest Toolkit   💗     ║"
echo -e "\342\225\236═════════════════════════════════════════════════\342\225\237\e[0m"
echo ""

# Vérification fichier JSON
if [[ ! -f "$DATA_FILE" ]]; then
    echo "❌ Fichier de données introuvable : $DATA_FILE"
    exit 1
fi

# Fonction de retour au menu principal
retour_menu() {
    exec "$0"
    exit
}

# Étape 1 - Choix de la catégorie
while true; do
    IFS=$'\n' read -r -d '' -a categories < <(jq -r '.[].categorie' "$DATA_FILE" | sort -u && printf '\0')
    echo "📂 Sélectionnez une catégorie de bien essentiel :"
    select cat in "${categories[@]}" "Retour"; do
        if [[ "$REPLY" -eq $((${#categories[@]} + 1)) ]]; then
            retour_menu
        elif [[ -n "$cat" ]]; then
            break
        fi
    done
    break
done

# Étape 2 - Choix du bien essentiel
while true; do
    IFS=$'\n' read -r -d '' -a essentiels < <(jq -r --arg cat "$cat" '.[] | select(.categorie == $cat) | .bien_essentiel' "$DATA_FILE" | sort -u && printf '\0')
    echo ""
    echo "🔐 Sélectionnez un bien essentiel :"
    select bien in "${essentiels[@]}" "Retour"; do
        if [[ "$REPLY" -eq $((${#essentiels[@]} + 1)) ]]; then
            exec "$0"
        elif [[ -n "$bien" ]]; then
            break
        fi
    done
    break
done

# Étape 3 - Choix du niveau OSI (dans l'ordre réel)
declare -A OSI_NAMES=(
    ["01_physique"]="Physique"
    ["02_liaison"]="Liaison"
    ["03_reseau"]="Réseau"
    ["04_transport"]="Transport"
    ["05_session"]="Session"
    ["06_presentation"]="Présentation"
    ["07_application"]="Application"
)

ordered_keys=("01_physique" "02_liaison" "03_reseau" "04_transport" "05_session" "06_presentation" "07_application")

while true; do
    echo ""
    echo "📶 Choisissez un niveau OSI :"
    for i in "${!ordered_keys[@]}"; do
        num=$((i+1))
        key="${ordered_keys[$i]}"
        printf "%2d) %s\n" "$num" "${OSI_NAMES[$key]}"
    done
    echo " 8) Retour"

    read -p "#? " choix

    if [[ "$choix" =~ ^[1-7]$ ]]; then
        osi="${ordered_keys[$((choix-1))]}"
        break
    elif [[ "$choix" == "8" ]]; then
        exec "$0"
    fi

    echo "Choix invalide, réessayez."
done

# Recherche de l'entrée correspondante
match=$(jq -r --arg cat "$cat" --arg bien "$bien" --arg osi "$osi" \
    '.[] | select(.categorie == $cat and .bien_essentiel == $bien and .niveau_osi == $osi)' "$DATA_FILE")

if [[ -n "$match" ]]; then
    attaque=$(echo "$match" | jq -r '.attaque')
    outil=$(echo "$match" | jq -r '.outil')
    risque=$(echo "$match" | jq -r '.risque_associe')
    cia=$(echo "$match" | jq -r '.risques_cia | "Confidentialité: \(.confidentialite) | Intégrité: \(.integrite) | Disponibilité: \(.disponibilite)"')

    echo ""
    echo -e "\e[33m🎯 Risque associé :\e[0m $risque"
    echo -e "\e[33m🔒 Risques CIA    :\e[0m $cia"
    echo -e "\e[33m🖠️  Outil recommandé :\e[0m $outil"

    nom_fichier=$(echo "$attaque" | iconv -f utf-8 -t ascii//TRANSLIT | tr '[:upper:]' '[:lower:]' | tr ' ' '_' | tr -dc '[:alnum:]_').md
    url="${GITHUB_BASE_URL}/${osi}/${nom_fichier}"

    echo ""
    echo -e "\e[36m📘 Chargement de la cheatsheet :\e[0m $url"
    echo ""
    if curl --output /dev/null --silent --head --fail "$url"; then
        curl -s "$url"
    else
        echo "❌ Cheatsheet introuvable à cette URL."
    fi
else
    echo ""
    echo "❌ Aucune donnée trouvée pour cette combinaison."
fi

